package com.apaza.moises.practicegreendao.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.apaza.moises.practicegreendao.database.Rating;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RATING".
*/
public class RatingDao extends AbstractDao<Rating, Void> {

    public static final String TABLENAME = "RATING";

    /**
     * Properties of entity Rating.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlaceId = new Property(0, long.class, "placeId", false, "PLACE_ID");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Qualification = new Property(2, Float.class, "qualification", false, "QUALIFICATION");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
    };

    private DaoSession daoSession;

    private Query<Rating> place_RatingPlaceQuery;

    public RatingDao(DaoConfig config) {
        super(config);
    }
    
    public RatingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RATING\" (" + //
                "\"PLACE_ID\" INTEGER NOT NULL ," + // 0: placeId
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"QUALIFICATION\" REAL," + // 2: qualification
                "\"COMMENT\" TEXT);"); // 3: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RATING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rating entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPlaceId());
        stmt.bindLong(2, entity.getUserId());
 
        Float qualification = entity.getQualification();
        if (qualification != null) {
            stmt.bindDouble(3, qualification);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
    }

    @Override
    protected void attachEntity(Rating entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Rating readEntity(Cursor cursor, int offset) {
        Rating entity = new Rating( //
            cursor.getLong(offset + 0), // placeId
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // qualification
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rating entity, int offset) {
        entity.setPlaceId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setQualification(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Rating entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Rating entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "RatingPlace" to-many relationship of Place. */
    public List<Rating> _queryPlace_RatingPlace(long placeId) {
        synchronized (this) {
            if (place_RatingPlaceQuery == null) {
                QueryBuilder<Rating> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlaceId.eq(null));
                place_RatingPlaceQuery = queryBuilder.build();
            }
        }
        Query<Rating> query = place_RatingPlaceQuery.forCurrentThread();
        query.setParameter(0, placeId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM RATING T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Rating loadCurrentDeep(Cursor cursor, boolean lock) {
        Rating entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public Rating loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Rating> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Rating> list = new ArrayList<Rating>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Rating> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Rating> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
